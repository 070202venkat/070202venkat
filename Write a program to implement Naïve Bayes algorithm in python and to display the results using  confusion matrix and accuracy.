import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.naive_bayes import GaussianNB from sklearn.metrics import confusion_matrix, accuracy_score import seaborn as sns import matplotlib.pyplot as plt

Sample dataset (Iris dataset for demonstration)

from sklearn.datasets import load_iris

data = load_iris() df = pd.DataFrame(data.data, columns=data.feature_names) df['target'] = data.target

Splitting data into training and testing sets

X = df.drop(columns=['target']) y = df['target'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

Creating and training the Na√Øve Bayes model

model = GaussianNB() model.fit(X_train, y_train)

Making predictions

y_pred = model.predict(X_test)

Evaluating the model

conf_matrix = confusion_matrix(y_test, y_pred) accuracy = accuracy_score(y_test, y_pred)

Displaying the confusion matrix

plt.figure(figsize=(6,4)) sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=data.target_names, yticklabels=data.target_names) plt.xlabel('Predicted') plt.ylabel('Actual') plt.title('Confusion Matrix') plt.show()

Printing accuracy

print(f'Accuracy: {accuracy * 100:.2f}%')


import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.naive_bayes import GaussianNB from sklearn.metrics import accuracy_score, classification_report, confusion_matrix from sklearn.datasets import load_iris

Load dataset

iris = load_iris() df = pd.DataFrame(data=iris.data, columns=iris.feature_names) df['species'] = iris.target

Display first few rows

display(df.head())

Splitting features and target

X = df.drop("species", axis=1) y = df["species"]

Train-test split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

Feature Scaling

scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test)

Train Naive Bayes Model

model = GaussianNB() model.fit(X_train, y_train)

Predictions

y_pred = model.predict(X_test)

Model Evaluation

accuracy = accuracy_score(y_test, y_pred) print(f"Accuracy: {accuracy}") print("Classification Report:") print(classification_report(y_test, y_pred)) print("Confusion Matrix:") print(confusion_matrix(y_test, y_pred))

Visualization

plt.figure(figsize=(8,6)) sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap="Blues", fmt="d") plt.xlabel("Predicted") plt.ylabel("Actual") plt.title("Confusion Matrix for Iris Classification") plt.show()

